<?xml version="1.0" encoding="UTF-8" ?>
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，
默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60" debug="false">
    <!-- 定义日志文件 输入位置 -->
    <property name="logPath" value="logs/learn.log" />
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="7"/>

    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!-- layout代表输出格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS}  %green(%-5level) %magenta(${PID:- }) --- [%t] [%X{MEETING_TRACE_LOG_ID}] %cyan(%logger) [%file:%line] [%X{logid}]- %m%n
            </pattern>
        </layout>
    </appender>
    <!--打印INFO日志-->
    <appender name="fileinfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--配置输出INFO 日志-->
        <file>logs/learn-api.log</file>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread][%X{MEETING_TRACE_LOG_ID}] %-5level %logger [%file:%line] [%X{logid}]- %msg%n
            </pattern>
        </encoder>
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
        <!-- 滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 TriggeringPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <!-- 输出路径 -->
            <fileNamePattern>
                logs/learn-api.log.%d{yyyy-MM-dd}.gz
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，
           则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
            <!--最大归档文件的数量，根据滚动策略来看-->
            <maxHistory>${maxHistory}</maxHistory>
            <!--删除多余文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>${logPath}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>3</maxIndex>
        </rollingPolicy>   -->
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>   -->
    </appender>

    <!--打印错误日志-->
    <appender name="fileerrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--配置输出ERROR 日志-->
        <file>logs/learn-api.err.log</file>
        <!-- 只记录ERROR级别日志，添加范围过滤，可以将该类型的日志特殊记录到某个位置 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread][%X{MEETING_TRACE_LOG_ID}] %-5level %logger [%file:%line] [%X{logid}]- %msg%n
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>
                logs/learn-api.err.log.%d{yyyy-MM-dd}.gz
            </fileNamePattern>
            <!--删除多余文件-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

    </appender>
    <!--关闭Version类的log-->
    <logger name="org.hibernate.validator.internal.util.Version" level="OFF"/>
    <logger name="org.apache.commons.beanutils.converters" level="OFF"/>
    <logger name="org.reflections.Reflections" level="OFF"/>
    <logger name="org.springframework.transaction" level="DEBUG"/>
    <logger name="org.mybatis.spring" level="DEBUG"/>
    converters

    <!-- 根节点，表名基本的日志级别，里面可以由多个appender规则 -->
    <!-- level="info"代表基础日志级别为info -->
    <root level="info">
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileinfoLog"/>
        <appender-ref ref="fileerrorLog"/>
    </root>
</configuration>
